---
description: How to set up and manage secrets in Firebase Functions
globs: *.sh, *.env, *.json, *.gitignore
---

# ðŸŽ¯ Main Objective: Configure Secret Management

- [ ] 1. Create secrets structure
  - [ ] 1.1. Create template file
    ```bash
    # API Configuration
    API_KEY=your-api-key-here
    LIST_ID=your-list-id-here
    ```
  - [ ] 1.2. Update .gitignore
    ```gitignore
    # Secrets
    .secrets
    ```

- [ ] 2. Create management scripts
  - [ ] 2.1. Create update script
    ```bash
    #!/bin/bash
    source ".secrets"
    
    update_secret() {
      local secret_name=$1
      local secret_value=$2
      firebase functions:secrets:set "$secret_name" "$secret_value" --project ${FIREBASE_PROJECT_ID}
    }
    
    update_secret "API_KEY" "$API_KEY"
    update_secret "LIST_ID" "$LIST_ID"
    ```
  - [ ] 2.2. Create clear script  
    ```bash
    #!/bin/bash
    
    SECRETS=("API_KEY" "LIST_ID")
    
    for secret in "${SECRETS[@]}"; do
      firebase functions:secrets:destroy "$secret" --project ${FIREBASE_PROJECT_ID} --force
    done
    ```

- [ ] 3. Set up secrets
  - [ ] 3.1. Copy template
    ```bash
    cp .secrets.template .secrets
    ```
  - [ ] 3.2. Edit secret values
    ```bash
    nano .secrets
    ```
  - [ ] 3.3. Upload to Firebase
    ```bash
    ./scripts/update_secrets.sh
    ```

- [ ] 4. Use secrets in code
  - [ ] 4.1. Access via environment variables
    ```typescript
    const apiKey = process.env.API_KEY;
    const listId = process.env.LIST_ID;
    ```
  - [ ] 4.2. Clear secrets if needed
    ```bash
    ./scripts/clear_secrets.sh
    ```
